# Bring up new hosts
- include: cloud/docker/create_docker_machines.yml
  when: "{{ server_groups.0 is defined }}"


# Ensure ansible can run on new hosts and
- include: util/ansible_prereqs.yml
- include: util/copy_host_files.yml

#- include: networking/tinc.yml
#- include: cloud/docker/persistence/flocker.yml


##############
#- include:  "{{ lookup('env','HEGEMON_LIB_HOME') }}/ansible/playbooks/cloud/docker/{{ item }}.yml"
#  with_items:
#    - create_docker_machines
#- name: Setup nomad
#  hosts: nomad_server
#  roles:
#  - { role: jgrowl.configure_nomad }
#  - name: setup private tinc networks
#    docker:
#      name: consul_server
#      image: gliderlabs/consul-server
#      use_tls: encrypt  # TODO: why doesn't verify work?
#      command: "{{ '-bootstrap' if item.name == bootstrap_machine_name else '' }}
#                {{ '-join=' ~ bootstrap_private_ip_address if item.name != bootstrap_machine_name else '' }}
#                -data-dir /tmp/consul
#                -node={{ item.name }}
#                {{ '-advertise=' ~ item.private_ip_address if item.name == bootstrap_machine_name else '' }}"
##      restart_policy: always
#      state: absent
#      ports:
#        - "{{ item.private_ip_address }}:8300:8300"
#        - "{{ item.private_ip_address }}:8301:8301"
#    environment:
#     DOCKER_HOST: "{{ item.env.DOCKER_HOST }}"
#     DOCKER_CERT_PATH: "{{ item.env.DOCKER_CERT_PATH }}"
#     DOCKER_TLS_VERIFY: "{{ item.env.DOCKER_TLS_VERIFY }}"
#    with_docker_machine: servers | map(attribute='name') | list



#  - set_fact:
#      bootstrap_machine_name: "{{ item.name }}"
#      bootstrap_private_ip_address: "{{ item.private_ip_address }}"
#    with_docker_machine: "{{ servers | selectattr('bootstrap') | map(attribute='name') | first }}"
#
#  - name: consul servers
#    docker:
#      name: consul_server
#      image: gliderlabs/consul-server
#      use_tls: encrypt  # TODO: why doesn't verify work?
#      command: "{{ '-bootstrap' if item.name == bootstrap_machine_name else '' }}
#                {{ '-join=' ~ bootstrap_private_ip_address if item.name != bootstrap_machine_name else '' }}
#                -data-dir /tmp/consul
#                -node={{ item.name }}
#                {{ '-advertise=' ~ item.private_ip_address if item.name == bootstrap_machine_name else '' }}"
##      restart_policy: always
#      state: absent
#      ports:
#        - "{{ item.private_ip_address }}:8300:8300"
#        - "{{ item.private_ip_address }}:8301:8301"
#    environment:
#     DOCKER_HOST: "{{ item.env.DOCKER_HOST }}"
#     DOCKER_CERT_PATH: "{{ item.env.DOCKER_CERT_PATH }}"
#     DOCKER_TLS_VERIFY: "{{ item.env.DOCKER_TLS_VERIFY }}"
#    with_docker_machine: servers | map(attribute='name') | list
#  - debug: msg="{{item}}"
#    with_items: servers | selectattr("bootstrap") | map(attribute='name') | first
##    with_items: servers | selectattr("bootstrap", "equalto", True) | map(attribute='name') | list
#  - name: consul servers
#    docker:
#      name: consul_server
#      image: gliderlabs/consul-server
#      use_tls: encrypt  # TODO: why doesn't verify work?
#      command: -bootstrap-expect {{ servers | length }} -data-dir /tmp/consul -node={{ item.name }} -advertise={{ item.private_ip_address }}
##      command: "-bootstrap-expect 1 -data-dir /tmp/consul -node=agent-one -bind=172.20.20.10 -config-dir /etc/consul.d"
#      restart_policy: always
#      state: absent
#      ports:
#        - "{{ item.private_ip_address }}:8300:8300"
#    environment:
#     DOCKER_HOST: "{{ item.env.DOCKER_HOST }}"
#     DOCKER_CERT_PATH: "{{ item.env.DOCKER_CERT_PATH }}"
#     DOCKER_TLS_VERIFY: "{{ item.env.DOCKER_TLS_VERIFY }}"
#    with_docker_machine: servers | map(attribute='name') | list
