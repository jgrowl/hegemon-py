#!/usr/bin/env python2

"""Usage:
  hegemon [--no-container] run
  hegemon [--no-container] new <name>
  hegemon [--no-container] server
  hegemon [--no-container] console
  hegemon [--no-container] shell
"""

import os
import sys

from docopt import docopt
from docker import Client
import dockerpty
import getpass
from pwd import getpwnam

from docker.utils import create_host_config

hegemon_lib_home = os.getenv('HEGEMON_LIB_HOME', None)
if hegemon_lib_home is None:
    raise Exception("HEGEMON_LIB_HOME must be defined!")

sys.path.append('{}/lib/python'.format(hegemon_lib_home))

from hegemon import HegemonConfig

# src = '/usr/bin/python'
# dst = '/tmp/python'
#
# # This creates a symbolic link on python in tmp directory
# os.symlink(src, dst)

# directory = ''
# if not os.path.exists(directory):
#     os.makedirs(directory)

if __name__ == '__main__':
    arguments = docopt(__doc__, version='0.1.1rc', options_first=True)
    username = getpass.getuser()
    uid = getpwnam(username)[2]
    guid = getpwnam(username).pw_uid

    hegemon_config = HegemonConfig(hegemon_lib_home)

    display = None
    if arguments['--no-container']:

        # If you need to jump into a shell for debugging purposes!
        if arguments['shell']:
            os.system("(cd ~; /bin/sh)")
        elif arguments['console']:
            print 'TODO: start hegemon console'
        elif arguments['new']:
            print 'TODO: generate new project'
        elif arguments['run']:
            from hegemon import Hegemon

            # It's important that all ANSIBLE_* configuration environment variables come before a Display is created
            from ansible.utils.display import Display
            display = Display()

            hegemon = Hegemon(hegemon_config, display)
            hegemon.run()
        elif arguments['server']:
            print 'TODO: start server'
    else:

        # base_url = 'tcp://127.0.0.1:2375'
        base_url='unix://var/run/docker.sock'
        image = 'jgrowl/hegemon'
        cli = Client(base_url=base_url)

        hegemon_args = sys.argv[1:] if len(sys.argv) > 1 else []
        hegemon_args.insert(0, '--no-container')

        volumes = [
            hegemon_config.hegemon_home,
            '/var/run/docker.sock',
            '/var/lib/docker'
        ]

        environment = {
            'HEGEMON_UID': uid,
            'HEGEMON_GUID': guid
        }

        project_name = os.path.basename(os.path.normpath(os.path.join(hegemon_config.hegemon_home, ''))).replace(".", '_')
        name = 'hegemon_{}'.format(project_name)

        default_sites_path = "/etc/hegemon/sites"

        # We should be using cli.create_host_config instead, but it isn't found in the version I'm pulling from ???
        host_config = create_host_config(binds=[
            # TOOD: change /default to match project name
            '{}:{}'.format(hegemon_config.hegemon_home, '{}/default'.format(default_sites_path)),
            '/var/run/docker.sock:/var/run/docker.sock',
            '/var/lib/docker:/var/lib/docker'
        ])

        container = cli.create_container(
                image=image,
                stdin_open=True,
                tty=True, command=" ".join(hegemon_args),
                volumes=volumes,
                environment=environment,
                name=name,
                host_config=host_config
        )

        dockerpty.start(cli, container)
        cli.remove_container(container)

    # print arguments
